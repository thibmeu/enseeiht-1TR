#include "sda.h"
#include "seatest.h"
#define limite 10*1000 - 1
#define logLimite 4


static void big_SDA(SDA* sda)
{
	for(int i = 0; i < limite; i++)
	{
		char str[logLimite+1];	//+1 for end of string '\0'
		sprintf(str, "%d", i);
		add_SDA(sda, str, i);
	}
}

void unit_init_SDA()
{
	SDA sda;
	INIT;
	
	assert_true(empty_SDA(sda));
	destroy_SDA(&sda);
}

void unit_empty()
{
	SDA sda;
	INIT;
	
	assert_true(empty_SDA(sda));
	add_SDA(&sda, "toto", 12);
	assert_false(empty_SDA(sda));
	
	destroy_SDA(&sda);
}

void unit_add()
{
	SDA sda;
	INIT;
	
	add_SDA(&sda, "toto", 12);
	assert_true(has_key_SDA(sda, "toto"));
	
	assert_true(getValue_SDA(sda, "toto") == 12);
	
	add_SDA(&sda, "toto", 42);
	assert_true(getValue_SDA(sda, "toto") == 42);
	
	add_SDA(&sda, "titi", 42);
	assert_true(has_key_SDA(sda, "titi"));
	
	add_SDA(&sda, "", 12);
	assert_true(has_key_SDA(sda, ""));
	
	destroy_SDA(&sda);
}

void unit_delete()
{
	SDA sda;
	INIT;
	
	add_SDA(&sda, "toto", 12);
	add_SDA(&sda, "titi", 12);
	assert_false(empty_SDA(sda));
	
	assert_true(has_key_SDA(sda, "toto"));
	delete_SDA(&sda, "toto");
	assert_false(has_key_SDA(sda, "toto"));
	
	delete_SDA(&sda, "toto");
	assert_false(has_key_SDA(sda, "toto"));
	
	big_SDA(&sda);
	
	for(int i = limite-1; i >= 0; i--)
	{
		char str[logLimite+1];
		sprintf(str, "%d", i);
		assert_true(has_key_SDA(sda, str));
		delete_SDA(&sda, str);
		assert_false(has_key_SDA(sda, str));
	}
	
	destroy_SDA(&sda);
}

void unit_has_key()
{
	SDA sda;
	INIT;
	
	add_SDA(&sda, "toto", 12);
	add_SDA(&sda, "titi", 12);
	
	assert_true(has_key_SDA(sda, "toto"));
	assert_true(has_key_SDA(sda, "titi"));
	
	assert_false(has_key_SDA(sda, "tata"));
	
	big_SDA(&sda);
	
	for(int i = limite-1; i >= 0; i--)
	{
		char str[logLimite+1];
		sprintf(str, "%d", i);
		assert_true(has_key_SDA(sda, str));
		delete_SDA(&sda, str);
		assert_false(has_key_SDA(sda, str));
	}
	
	destroy_SDA(&sda);
}

void unit_getValue()
{
	SDA sda;
	INIT;
	
	add_SDA(&sda, "toto", 12);
	add_SDA(&sda, "titi", 12);
	assert_false(empty_SDA(sda));
	
	assert_true(getValue_SDA(sda, "toto") == 12);
	
	add_SDA(&sda, "toto", 42);
	assert_true(getValue_SDA(sda, "toto") == 42);
	
	big_SDA(&sda);
	
	for(int i = 0; i < limite; i++)
	{
		char str[logLimite+1];
		sprintf(str, "%d", i);
		assert_true(getValue_SDA(sda, str) == i);
	}
	
	destroy_SDA(&sda);
}

void unit_clear()
{
	SDA sda;
	INIT;
	
	add_SDA(&sda, "toto", 12);
	add_SDA(&sda, "titi", 12);
	assert_false(empty_SDA(sda));
	
	clear_SDA(&sda);
	assert_true(empty_SDA(sda));
	
	big_SDA(&sda);
	
	assert_false(empty_SDA(sda));
	clear_SDA(&sda);
	assert_true(empty_SDA(sda));
	
	destroy_SDA(&sda);
}

void unit_destroy()
{
	SDA sda;
	INIT;
	
	destroy_SDA(&sda);
	assert_true(sda == NULL);
	
	INIT;
	
	destroy_SDA(&sda);
	assert_true(sda == NULL);
	
	INIT;
	big_SDA(&sda);
	
	destroy_SDA(&sda);
	assert_true(sda == NULL);
}

//9. Afficher une SDA, c’est-à-dire tous les couples (clef, donnee) enregistres dans la SDA. Cet affichage est à des fins de mise au point (voir section 1.4)
void unit_print_SDA()
{
	;
}
//--> A FAIRE en version modulable LCA et TH

void unit_fixture_init_SDA()
{
	test_fixture_start();
	run_test(unit_init_SDA);
	test_fixture_end();
}

void unit_fixture_empty()
{
	test_fixture_start();
	run_test(unit_empty);
	test_fixture_end();
}

void unit_fixture_add()
{
	test_fixture_start();
	run_test(unit_add);
	test_fixture_end();
}

void unit_fixture_delete()
{
	test_fixture_start();
	run_test(unit_delete);
	test_fixture_end();
}

void unit_fixture_has_key()
{
	test_fixture_start();
	run_test(unit_has_key);
	test_fixture_end();
}

void unit_fixture_getValue()
{
	test_fixture_start();
	run_test(unit_getValue);
	test_fixture_end();
}

void unit_fixture_clear()
{
	test_fixture_start();
	run_test(unit_clear);
	test_fixture_end();
}

void unit_fixture_destroy()
{
	test_fixture_start();
	run_test(unit_destroy);
	test_fixture_end();
}

void unit_fixture_print_SDA()
{
	test_fixture_start();
	run_test(unit_print_SDA);
	test_fixture_end();
}

void all_unit_LCA()
{
	unit_fixture_init_SDA();
	unit_fixture_empty();
	unit_fixture_add();
	unit_fixture_delete();
	unit_fixture_has_key();
	unit_fixture_getValue();
	unit_fixture_clear();
	unit_fixture_destroy();
	unit_fixture_print_SDA();
}
