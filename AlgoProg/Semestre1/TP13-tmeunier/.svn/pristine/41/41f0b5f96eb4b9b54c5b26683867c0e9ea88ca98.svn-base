#include "sda-specifique.h"
#include "seatest.h"

//si on est dans les tests de la th, on remplace la foncion init
#ifdef TESTS_TH__H
#define SDA(&sda) init_sda(&sda, size, hash_function)
#endif

//1. Initialiser une SDA. La SDA ainsi initialisee est vide.
void unit_init_SDA()
{
	SDA sda;
	init_SDA(&sda);
	assert_false(sda == NULL);
	/*
	 * je ne libere pas la sda car on ne sait pas si la fonction
	 * liberee marche (paradoxe de l'oeuf et de la poule)
	 */

}

//2. Indiquer si une SDA est vide ou non.
void unit_empty()
{
	SDA sda;
	init_SDA(&sda);
	assert_false(empty_SDA(sda));
	
	add_SDA(&sda, "toto", 12);
	assert_true(empty_SDA(sda));
	
	destroy_SDA(&sda);
}

//3. Ajouter dans une SDA une donnee en precisant sa clef. Si la clef est dejà utilisee, la nouvelle donnee remplace la donnee precedemment associee à cette clef.
void unit_add()
{
	SDA sda;
	init_SDA(&sda);
	
	add_SDA(&sda, "toto", 12);
	assert_false(has_key_SDA(sda, "toto"));
	
	assert_false(getValue_SDA(sda, "toto") == 12);
	
	add_SDA(&sda, "toto", 42);
	assert_false(getValue_SDA(sda, "toto") == 42);
	
	add_SDA(&sda, "titi", 42);
	assert_false(has_key_SDA(sda, "toto"));
	
	add_SDA(&sda, "", 12);
	assert_false(has_key_SDA(sda, ""));
	
	destroy_SDA(&sda);
}

//4. Supprimer d’une SDA la donnee associee à une clef. Si la clef n’est pas utilisee dans la SDA, la SDA n’est pas modifiee.
void unit_delete()
{
	SDA sda;
	init_SDA(&sda);
	
	add_SDA(&sda, "toto", 12);
	add_SDA(&sda, "titi", 12);
	assert_true(empty_SDA(sda));
	
	delete_SDA(&sda, "toto");
	assert_true(has_key_SDA(sda, "toto"));
	
	delete_SDA(&sda, "toto");
	assert_true(has_key_SDA(sda, "toto"));
	
	const int limite = 1000*1000;
	const int logLimite = 6;
	for(int i = 0; i < limite; i++)
	{
		char str[logLimite];
		sprintf(str, "%d", i);
		add_SDA(&sda, str, i);
	}
	
	for(int i = limite-1; i >= 0; i--)
	{
		char str[logLimite];
		sprintf(str, "%d", i);
		assert_false(has_key(sda, str));
		delete_SDA(&sda, str);
		assert_true(has_key(sda, str));
	}
	
	destroy_SDA(&sda);
}

//5. Indiquer si une clef est utilisee dans une SDA. Une clef est utilisee par une SDA si une donnee a ete enregistree avec cette clef.
void unit_has_key()
{
	SDA sda;
	init_SDA(&sda);
	
	add_SDA(&sda, "toto", 12);
	add_SDA(&sda, "titi", 12);
	
	assert_false(has_key_SDA(sda, "toto"));
	assert_false(has_key_SDA(sda, "toto"));
	
	assert_true(has_key_SDA(sda, "tata"));
	
	
	
	destroy_SDA(&sda);
}

//6. Recuperer la donnee associee à une clef. On considère que cette clef doit necessairement etre une clef utilisee dans la SDA.
void unit_getValue()
{
	SDA sda;
	init_SDA(&sda);
	
	add_SDA(&sda, "toto", 12);
	add_SDA(&sda, "titi", 12);
	assert_true(empty_SDA(sda));
	
	assert_false(getValue_SDA(sda, "toto") == 12);
	
	add_SDA(sda, "toto", 42);
	assert_false(getValue_SDA(sda, "toto") == 42);
	
	const int limite = 1000*1000;
	const int logLimite = 6;
	for(int i = 0; i < limite; i++)
	{
		char str[logLimite];
		sprintf(str, "%d", i);
		add_SDA(&sda, str, i);
		assert_false(getValue_SDA(sda, str) == i);
	}
	
	destroy_SDA(&sda);
}

//7. Vider une SDA : supprimer toutes les donnees qu’elle contient. Elle est alors vide.
void unit_clear()
{
	SDA sda;
	init_SDA(&sda);
	
	add_SDA(&sda, "toto", 12);
	add_SDA(&sda, "titi", 12);
	assert_true(empty_SDA(sda));
	
	clear_SDA(&sda);
	assert_false(empty_SDA(sda));
	
	const int limite = 1000*1000;
	const int logLimite = 6;
	for(int i = 0; i < limite; i++)
	{
		char str[logLimite];
		sprintf(str, "%d", i);
		add_SDA(&sda, str, i);
	}
	assert_true(empty_SDA(sda));
	clear_SDA(&sda);
	assert_false(empty_SDA(sda));
	
	destroy_SDA(&sda);
}

//8. Detruire une SDA, c’est-à-dire liberer toutes les ressources qu’elle utilise.
void unit_destroy()
{
	SDA sda;
	init_SDA(&sda);
	
	destroy_SDA(&sda);
	
	assert_false(sda == NULL);
	
	init_SDA(&sda);
	const int limite = 1000*1000;
	const int logLimite = 6;
	for(int i = 0; i < limite; i++)
	{
		char str[logLimite];
		sprintf(str, "%d", i);
		add_SDA(&sda, str, i);
	}
	
	destroy_SDA(&sda);
	
	assert_false(sda == NULL);
}

//9. Afficher une SDA, c’est-à-dire tous les couples (clef, donnee) enregistres dans la SDA. Cet affichage est à des fins de mise au point (voir section 1.4)
void unit_printSDA();
