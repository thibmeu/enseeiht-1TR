CC=gcc
CFLAGS= -std=c99 -pg -Wall -pedantic
# -ansi 
#
GENERES =	\
	lca.h	\
	th.h	\
	exemple-lca.c	\
	exemple-th.c	\
	interpreteur-lca.c	\
	interpreteur-th.c	\
	tests-lca-commun.c	\
	tests-th-commun.c	\


EXE =	\
	exemple-lca-iterative	\
	exemple-lca-recursive	\
	exemple-th	\
	interpreteur-lca-iterative	\
	interpreteur-lca-recursive	\
	interpreteur-th	\
	tests-lca	\
	tests-th	\

TLCA = lca-iterative
#TLCA = lca-recursive
	


all:: ${GENERES} $(EXE)


interpreteur-lca-iterative: interpreteur-lca.o lca-iterative.o lca-solo.o types.o
	$(CC) $(LDFLAGS) -o $@ $^

interpreteur-lca-recursive: interpreteur-lca.o lca-recursive.o lca-solo.o types.o
	$(CC) $(LDFLAGS) -o $@ $^

interpreteur-th: interpreteur-th.o $(TLCA).o th.o lca-solo.o fonctions-hachage.o types.o
	$(CC) $(LDFLAGS) -o $@ $^

exemple-lca-iterative: exemple-lca.o $(TLCA).o lca-solo.o types.o
	$(CC) $(LDFLAGS) -o $@ $^

exemple-lca-recursive: exemple-lca.o lca-recursive.o lca-solo.o types.o
	$(CC) $(LDFLAGS) -o $@ $^

exemple-th: exemple-th.o th.o fonctions-hachage.o $(TLCA).o lca-solo.o types.o
	$(CC) $(LDFLAGS) -o $@ $^

tests-lca: tests-lca.o types.o seatest.o $(TLCA).o lca-solo.o
	$(CC) $(LDFLAGS) -o $@ $^

tests-th: tests-th.o types.o seatest.o th.o $(TLCA).o fonctions-hachage.o lca-solo.o
	$(CC) $(LDFLAGS) -o $@ $^

lca.h: sda.h types.h
	cat $< | sed -e s/sda/lca/g -e s/SDA/LCA/g > $@

th.h: sda.h types.h
	cat $< | sed -e s/sda/th/g -e s/SDA/TH/g > $@

tests-lca-commun.c: tests-sda-commun.c
	cat $< | sed -e s/sda/lca/g -e s/SDA/LCA/g > $@
	
tests-th-commun.c: tests-sda-commun.c
	cat $< | sed -e s/sda/th/g -e s/SDA/TH/g > $@

%-lca.c: %-sda.c
	cat $< | sed -e s/sda/lca/g -e s/SDA/LCA/g > $@

%-th.c: %-sda.c
	cat $< | sed -e s/sda/th/g -e s/SDA/TH/g > $@

types.o: types.h
seatest.o: seatest.h
th.o: th.h
lca-solo.o : lca-solo.h
lca-iterative.o: lca.h
lca-recursive.o: lca.h
exemple-lca.o: lca.h
exemple-th.o: th.h
tests-lca.o: tests-lca.c
tests-th.o: tests-th.c


clean::
	rm -f *.o
	rm -f ${GENERES}
	rm -f $(EXE) a.out

force::
	make clean
	make all
