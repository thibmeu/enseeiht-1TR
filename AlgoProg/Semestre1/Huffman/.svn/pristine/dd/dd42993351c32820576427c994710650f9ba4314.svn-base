
/*******************************************************************************
 *  Auteur   : Thibault Meunier
 *  Objectif : Implantation de la List
 ******************************************************************************/
#ifndef LIST_H
#define LIST_H

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

struct Cell
{
	void* data;		// <key, value>
	struct Cell* next;	// NULL si fin de la List
};
typedef struct Cell* Cell;

struct List
{
	Cell cell;							//same as LCA
	size_t size_data;					//sizeof to do so
	void (*init_data)(void**);			//Be careful, only one parameter
	void (*destroy_data)(void*);		//Free for default
	void (*equal_data)(void*, void*);	//Set first data to the second
	int (*compar_data)(void*, void*);	//-1 if a < b, 0 if a == b, 1 if a > b
};
typedef struct List* List;

int noOrder(void* a, void* b);	//Anything added at the end
//Use it with caution : you cannot know if a key is in the List !

void init_List(List* this, size_t size_data, void (*init_data)(void**), void (*destroy_data)(void*), void (*equal_data)(void*, void*), int (*compar)(void*, void*));
//Procedure init_List(this: out, size_data: in, init_data: in, destroy_data: in, equal_data: in, compar: in)
//initialise une liste

bool empty_List(List this);

size_t size_List(List this);

void add_List(List this, void* data);

void delete_List(List this, void* data);

void* front_List(List this);

void push_front_List(List this, void* data);	//for noOrder

void pop_front_List(List this);

void* back_List(List this);

void push_back_List(List this, void* data);		//for noOrder

void pop_back_List(List this);

void pop_back_List(List this);

bool has_data_List(List this, void* data);

void* get_i_List(List list, int i);

void clear_List(List this);

void destroy_List(List* this);


#endif
