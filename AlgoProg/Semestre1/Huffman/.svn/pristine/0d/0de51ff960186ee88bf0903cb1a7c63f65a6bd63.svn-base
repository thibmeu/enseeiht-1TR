#include "tree.h"

void init_Tree(Tree* tree)
{
	*tree = NULL;
}

void destruct_Tree(Tree* tree)
{
	if(!empty_Tree(*tree))
	{
		destruct_Tree(&((*tree)->left));
		destruct_Tree(&((*tree)->right));
		free(*tree);
		*tree = NULL;
	}
}

bool empty_Tree(Tree tree)
{
	return tree == NULL;
}

int size_Tree(Tree tree)
{
	if (empty_Tree(tree))
		return 0;
	return 1 + size_Tree(tree->left) + size_Tree(tree->right);
}

bool has_key_Tree(Tree tree, int freq)
{
	if (empty_Tree(tree))
		return false;
	;
}

Value get_value_Tree(Tree tree, int freq)
{
	
}

void print_Tree(Tree tree);

void couple_to_Tree(Tree* tree, Couple couple)
{
	if (tree != NULL)
		destruct_Tree(tree);
	*tree = malloc(sizeof(struct Tree));
	(*tree)->couple = couple;
	(*tree)->left = NULL;
	(*tree)->right = NULL;
}

void concatenate_Tree(Tree* dest, Tree source)
{
	Tree tree = malloc(sizeof(struct Tree));
	init_Couple(&(tree->couple), '', (*dest)->couple.freq + source->couple.value);
	tree->left = *dest;
	tree->right = source;
	*dest = tree;
}

void add_subTree(Tree* father, Tree source, bool right);
