
/*******************************************************************************
 *  Auteur   : Thibault Meunier
 *  Objectif : Implantation de la List
 ******************************************************************************/

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "List.h"

struct List
{
	TYPE data;		// <key, value>
	struct List* next;	// NULL si fin de la List
};
typedef struct List* List;
//NULL si vide

// TODO: Donner la specification des sous-programmes dont la signature est
// specifique à List.

void init_List(List* this);
/*
 * Procedure init_List(this: List out)
 * 
 * Initialise une List vide
 * 
 * Necessite:
 * this != NULL
 * 
 * Assure:
 * List initialise et vide
 */

void add_List_solo(List* this, TYPE data);

void delete_List_solo(List* this);

bool empty_List(List this);
/*
 * Fonction empty_List(this: List in)
 * 
 * Indique si une List est vide ou non
 * 
 * Necessite:
 * this initialise
 * 
 * Assure:
 * Renvoie Vrai si la List est vide, Faux sinon
 */

void add_List(List* this, TYPE data);
/*
 * Proedure add_List(this: List in/out, key: Clef in, value: Donnee in)
 * 
 * Ajoute dans une List une donnee en precisant sa clef
 * Si la clef est dejà utilisee, la nouvelle donnee remplace la donnee precedemment associee à cette clef
 * 
 * Necessite:
 * this != NULL
 * key et value valide
 * 
 * Assure:
 * L'ajout se fait selon l'ordre alphabetique
 */

void delete_List(List* this, TYPE data);
/*
 * Procedure  delete_List(this: List in/out, key: Clef in)
 * 
 * Supprimer d’une List la donnee associee à une clef
 * Si la clef n’est pas utilisee dans la List, la List n’est pas modifiee
 * 
 * Necessite:
 * this != NULL
 * key valide
 * 
 * Assure:
 * L'element est supprime si possible
 */

bool has_key_List(List this, TYPE data);
/*
 * Fonction has_key_List(this: List in, key: Clef in)
 * 
 * Indique si une clef est utilisee dans une List
 * 
 * Necessite:
 * this et key valide
 * 
 * Assure:
 * Renvoie Vrai si la clef est dans la List, Faux sinon
 */

Donnee getValue_List(List this, TYPE data);
/*
 * Procedure getValue_List(this: List in, key: Clef in)
 * 
 * Recupere la donnee associee à une clef
 * 
 * Necessite:
 * this et key valide
 * key dans la List
 * 
 * Assure:
 * Renvoie une Donnee
 */

void clear_List(List* this);
/*
 * Procedure clear_List(this: List in/out)
 * 
 * Supprime toutes les donnees que contient la List
 * 
 * Necessite:
 * this != NULL
 * 
 * Assure:
 * List vide
 */

void destroy_List(List* this);
/*
 * Procedure destroy_List(this: List in/out)
 * 
 * Libere toutes les ressources qu’utilise la List
 * 
 * Necessite:
 * this != NULL
 * 
 * Assure:
 * List desallouee
 * *this = NULL
 */

void print_List(List this);
/*
 * Procedure print_List(this: List in)
 * 
 * Affiche tous les couples (clef, donnee) enregistres dans la List
 * 
 * Necessite:
 * this initialise
 * 
 * Assure:
 * L'affichage se fait sur la stdout
 */


